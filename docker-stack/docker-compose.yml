# ---------------------------------
# Docker Compose - Full Stack Setup
# Laravel Backend + Worker + Vue + DBs + RabbitMQ + GraphQL + phpMyAdmin
# ---------------------------------

networks:
  appnet:

volumes:
  mysql_data:
  mongo_data:
  rabbitmq_data:

services:

  # -----------------------
  # Laravel Backend
  # -----------------------
  laravel:
    build:
      context: ../auth-system
      dockerfile: Dockerfile
    container_name: laravel-backend
    volumes:
      - ../auth-system:/var/www
      - ../auth-system/.env:/var/www/.env
    expose:
      - "9000"
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      APP_ENV: local
      QUEUE_CONNECTION: rabbitmq
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: root
      MONGO_DB_HOST: mongo
      MONGO_DB_PORT: 27017
      MONGO_DB_DATABASE: read_model
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
    networks: [appnet]
    healthcheck:
      test: ["CMD-SHELL", "php -v || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5

  # -----------------------
  # Laravel Worker
  # -----------------------
  laravel-worker:
    build:
      context: ../auth-system
      dockerfile: Dockerfile
    container_name: laravel-worker
    command: php artisan queue:work --queue=domain-events,default --sleep=1 --tries=5
    restart: always
    depends_on:
      laravel:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      QUEUE_CONNECTION: rabbitmq
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: root
      MONGO_DB_HOST: mongo
      MONGO_DB_PORT: 27017
      MONGO_DB_DATABASE: read_model
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
    networks: [appnet]

  # -----------------------
  # Nginx
  # -----------------------
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8000:80"
    volumes:
      - ../auth-system:/var/www
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      laravel:
        condition: service_healthy
    networks: [appnet]

  # -----------------------
  # Vue Frontend
  # -----------------------
  vue:
    build:
      context: ../vue-auth-system
      dockerfile: Dockerfile
    container_name: vue-frontend
    volumes:
      - ../vue-auth-system:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev -- --host 0.0.0.0
    networks: [appnet]

  # -----------------------
  # MySQL (Write DB)
  # -----------------------
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
    networks: [appnet]
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10

  # -----------------------
  # MongoDB (CQRS / Read Model)
  # -----------------------
  mongo:
    image: mongo:6
    container_name: mongo-db
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks: [appnet]
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 10

  # -----------------------
  # RabbitMQ
  # -----------------------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks: [appnet]
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  # -----------------------
  # GraphQL API (Read Model)
  # -----------------------
  graphql:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: graphql-read-api
    ports:
      - "4000:4000"
    environment:
      MONGO_URL: mongodb://mongo:27017
      MONGO_DB: read_model
    depends_on:
      mongo:
        condition: service_healthy
    networks: [appnet]

  # -----------------------
  # phpMyAdmin
  # -----------------------
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
    networks: [appnet]
